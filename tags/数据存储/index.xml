<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据存储 on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
    <description>Recent content in 数据存储 on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <lastBuildDate>Tue, 09 Apr 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.wenzhixin.net.cn/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>客户端数据存储之 Web Storage</title>
      <link>http://blog.wenzhixin.net.cn/2013/04/09/data_storage</link>
      <pubDate>Tue, 09 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/2013/04/09/data_storage</guid>
      <description>

&lt;h3 id=&#34;web-storage:27a02d2bc801c512b59853689c2f5851&#34;&gt;Web Storage&lt;/h3&gt;

&lt;p&gt;Web Storage 有两种形式：localStorage (本地存储) 和 sessionStorage (会话存储)。
与 cookie 相似，都是使用&lt;strong&gt;键值对&lt;/strong&gt;来对数据进行存储和读取。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里对 cookie 与 Web Storage 进行了比较：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cookie：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;容量 4kb，支持各种浏览器，但是每次请求浏览器都会把本机存的 cookies 发送到服务器&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Storage:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) 存储空间更大
2) 数据则仅仅是存在本地，不与服务器发生任何交互
3) 独立的存储空间&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;而 localStorage 与 sessionStorage 的区别：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;localStorage：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即使浏览器关闭了，数据也会被保存下来并可用于所有来自同源（相同域名、协议和端口）窗口的加载。&lt;/p&gt;

&lt;p&gt;主要用于&lt;strong&gt;参数设置&lt;/strong&gt;或者&lt;strong&gt;偏好设置&lt;/strong&gt;的功能。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sessionStorage：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据存储在窗口对象中，对于其他窗口或标签不可见，并且当窗口关闭时，数据丢失。&lt;/p&gt;

&lt;p&gt;主要用于&lt;strong&gt;特殊的窗口状态&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么要怎么使用 Web Storage？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实提供的接口很简单，localStorage 和 sessionStorage 的用法是一样的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置数据：setItem(name, value)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;获取数据：getItem(name)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除键值：removeItem(name)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;删除所有键值：clear()&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;/p&gt;
localStorage.setItem(&#39;name&#39;, &#39;wenzhixin&#39;);
localStorage.getItem(&#39;name&#39;); //&#39;wenzhixin&#39;
localStorage.removeItem(&#39;name&#39;);
localStorage.clear();

&lt;p&gt;当然，你也可以使用普通的对象用法：&lt;/p&gt;
localStorage.name = &#39;wenzhixin&#39;;
localStorage[&#39;name&#39;] = &#39;wenzhixin&#39;;
localStorage.name; //&#39;wenzhixin&#39;
localStorage[&#39;name&#39;]; //&#39;wenzhixin&#39;
delete localStorage.name;//删除键值
delete localStorage[&#39;name&#39;];//删除键值

&lt;p&gt;在&lt;strong&gt;实际使用&lt;/strong&gt;中，会先将数据转换为 JSON，作为字符存储，如：&lt;/p&gt;
localStorage[name] = JSON.stringify(value); //存储
JSON.parse(localStorage[name]); //读取

&lt;p&gt;&lt;strong&gt;如何判断一个浏览器是否支持 Web Storage 呢？&lt;/strong&gt;&lt;/p&gt;
function supportsLocalStorage() {
    try {
        return &#39;localStorage&#39; in window &amp;&amp; window[&#39;localStorage&#39;] !== null;
    } catch (e) {
        return false;
    }
}

&lt;p&gt;&lt;strong&gt;存储事件与触发条件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当存储对象中的值发生变化后，会触发一个存储事件，事件的&lt;strong&gt;数据结构&lt;/strong&gt;为：&lt;/p&gt;
var StorageEvent = {
    key: &#39;key&#39;,
    oldValue: &#39;oldValue&#39;,
    newValue: &#39;newValue&#39;,
    url: &#39;url&#39;,
    storageArea: storage //更改的存储区域
};

&lt;p&gt;通过 window 来添加&lt;strong&gt;事件监听&lt;/strong&gt;：&lt;/p&gt;
function addStorageEvent() {
    var handlerStorage = function(e) {
        console.log(e);
    };
    if (window.addEventListener) {
        window.addEventListener(&#34;storage&#34;, handlerStorage, false);
    } else {
        window.attachEvent(&#34;onstorage&#34;, handlerStorage); //IE浏览器
    };
}

&lt;p&gt;当然，也可以使用 jQuery 来添加事件：&lt;/p&gt;
function addStorageEvent() {
    var handlerStorage = function(e) {
        console.log(e.originalEvent); //使用 jQuery 需要用 originalEvent
    };
    $(window).on(&#39;storage&#39;, handlerStorage);
}

&lt;p&gt;当调用 setItem(), removeItem(), 和 clear() 方法的时候，都会&lt;strong&gt;触发 storage 事件&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;那么，下面的代码，是否会触发 StorageEent 呢？&lt;/p&gt;
addStorageEvent();
localStorage.setItem(&#39;name&#39;, &#39;wenyi&#39;);//是否会触发呢？

&lt;p&gt;答案是 no，no～你一定会问为什么不会触发呢？&lt;/p&gt;
A storage event is fired on every window/tab except for the one that updated the localStorage object and caused the event.

&lt;p&gt;没错，确实不会触发。因为同一窗口下不会触发事件，当打开新的窗口或者标签，才会触发 Storage Event。&lt;/p&gt;

&lt;p&gt;由此，我们可以知道，storage 事件主要是&lt;strong&gt;用于监听 localStorage 数据改变时，通知其他窗口或者标签&lt;/strong&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;相关-jquery-插件:27a02d2bc801c512b59853689c2f5851&#34;&gt;相关 jQuery 插件&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DSt (&lt;a href=&#34;https://github.com/gamache/DSt&#34;&gt;https://github.com/gamache/DSt&lt;/a&gt;) 是一个包装 localStorage 对象的简单类库。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;jStore (&lt;a href=&#34;https://code.google.com/p/jquery-jstore&#34;&gt;https://code.google.com/p/jquery-jstore&lt;/a&gt;) jQuery 的 jStore 插件，
支持 localStorage、sessionStorage、Gears SQLLite 和 HTML5 SQLLite，以及 Flash Storage 和 IE7 的解决方案。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;实践:27a02d2bc801c512b59853689c2f5851&#34;&gt;实践&lt;/h4&gt;

&lt;p&gt;在这里，我们来编写一个自定义界面用于对浏览器上的存储对象的查看和编辑。&lt;/p&gt;

&lt;p&gt;思路：&lt;strong&gt;使用表格来进行显示，使用 prompt 来进行编辑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;猛击 &lt;a href=&#34;http://blog.wenzhixin.net.cn/demos/webstorage.html&#34;&gt;这里&lt;/a&gt; 查看 demo&lt;/p&gt;

&lt;p&gt;html 代码：&lt;/p&gt;
&lt;div&gt;
    &lt;button id=&#34;clear&#34;&gt;清空所有&lt;/button&gt;
  &lt;/div&gt;
  &lt;table&gt;
    &lt;thead&gt;
          &lt;tr&gt;
            &lt;th&gt;键&lt;/th&gt;
            &lt;th&gt;值&lt;/th&gt;
            &lt;th&gt;操作&lt;/th&gt;
          &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;&lt;/tbody&gt;
  &lt;/table&gt;

&lt;p&gt;js 代码：&lt;/p&gt;
$(function() {

    var $tbody = $(&#39;table tbody&#39;);

    function main() {
        $(window).on(&#39;storage&#39;, list);

        //添加测试数据
        localStorage.setItem(&#39;name&#39;, &#39;wenzhixin&#39;);
        localStorage.setItem(&#39;age&#39;, 26);
        list();
        events();
    }

    function events() {
        $(&#39;#clear&#39;).click(function() {
            localStorage.clear();
            list();
        });
        $(document).on(&#39;click&#39;, &#39;button.edit&#39;, function() {
            var key = $(this).parents(&#39;tr&#39;).attr(&#39;data-key&#39;),
                value = localStorage[key],
                newValue = prompt(&#39;请输入键为&#39; + key + &#39;的新值：&#39;, value);
            if (newValue) {
                localStorage.setItem(key, newValue);
                list();
            }
        });
        $(document).on(&#39;click&#39;, &#39;button.remove&#39;, function() {
            var key = $(this).parents(&#39;tr&#39;).attr(&#39;data-key&#39;);
            localStorage.removeItem(key);
            list();
        });
    }

    function list() {
        var html = [];
        for (var key in localStorage) {
            html.push(getItem(key, localStorage[key]));
        }
        $tbody.html(html.join(&#39;&#39;));
    }

    function getItem(key, value) {
        return [
            &#39;&lt;tr data-key=&#34;&#39; + key + &#39;&#34;&gt;&#39;,
                &#39;&lt;td&gt;&#39; + key + &#39;&lt;/td&gt;&#39;,
                &#39;&lt;td&gt;&#39; + value + &#39;&lt;/td&gt;&#39;,
                &#39;&lt;td&gt;&#39;,
                    &#39;&lt;button class=&#34;btn edit&#34;&gt;编辑&lt;/button&gt;&#39;,
                    &#39;&lt;button class=&#34;btn remove&#34;&gt;删除&lt;/button&gt;&#39;,
                &#39;&lt;/td&gt;&#39;,
            &#39;&lt;/tr&gt;&#39;
        ].join(&#39;&#39;);
    }

    main();
});

&lt;hr /&gt;

&lt;p&gt;注：本文中的大部分观点以及例子属于个人理解，难免还有不准确的地方，欢迎有相关研究的同行指正。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>