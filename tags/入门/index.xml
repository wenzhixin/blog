<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>入门 on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/tags/%E5%85%A5%E9%97%A8/</link>
    <description>Recent content in 入门 on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <lastBuildDate>Tue, 12 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.wenzhixin.net.cn/tags/%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>html5 canvas 画布入门</title>
      <link>http://blog.wenzhixin.net.cn/2013/11/12/hello_canvas</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/2013/11/12/hello_canvas</guid>
      <description>&lt;p&gt;今天开始学点新东西，canvas 画布，它是一个 HTML5 的一个新元素，
它没有自己的行为，但是定义了一个 API 支持脚本化客户端绘图操作。&lt;/p&gt;

&lt;p&gt;既然是入门，也来个 hello world 小程序吧。&lt;/p&gt;
&lt;!doctype html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34; /&gt;
    &lt;title&gt;hello canvas&lt;/title&gt;
    &lt;style&gt;
        body {
            background: #ddd;
        }
        #canvas {
            background: #fff;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;canvas id=&#34;canvas&#34; width=&#34;600&#34; height=&#34;300&#34;&gt;&lt;/canvas&gt;
    &lt;script&gt;
        var canvas = document.getElementById(&#39;canvas&#39;),
            context = canvas.getContext(&#39;2d&#39;);

        context.font = &#39;38pt Arial&#39;;
        context.fillStyle = &#39;cornflowerblue&#39;;
        context.strokeStyle = &#39;blue&#39;;

        context.fillText(&#39;Hello Canvas&#39;, canvas.width / 2 - 150, canvas.height / 2 + 15);
        context.strokeText(&#39;Hello Canvas&#39;, canvas.width / 2 - 150, canvas.height / 2 + 15);
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;效果：
&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/12/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;需要注意的是，在这里，我们是通过设置 canvas 元素的 width 与 height，来改变元素大小的。
假如通过 css 来设置 canvas 元素的大小，两者的效果并不一样。&lt;/p&gt;
#canvas {
    width: 600;
    height: 300;
}

&lt;canvas id=&#34;canvas&#34;&gt;&lt;/canvas&gt;

&lt;p&gt;效果：
&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/12/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是因为 canvas 元素有元素本身大小与元素绘图表面大小两套尺寸。
设置 width 和 height 时，实际上是同时修改了该元素本身大小和元素绘图表面大小；
而设置 css，只会改变元素本身大小，并不会改变元素绘图表面大小。
默认情况下元素本身大小与元素绘图表面大小都为 300 x 150。
当元素本身大小与元素绘图表面大小不一样大小时，浏览器会对绘图表面进行缩放。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>