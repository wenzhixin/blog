<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http代理 on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/tags/http%E4%BB%A3%E7%90%86/</link>
    <description>Recent content in Http代理 on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <atom:link href="http://blog.wenzhixin.net.cn/tags/http%E4%BB%A3%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用 apache2 作为代理服务器轻松解决 Ajax 跨域问题</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/apache_proxy</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/apache_proxy</guid>
      <description>

&lt;h3 id=&#34;介绍:299d40c8bf8f0942a2f38dea542412ab&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;我们知道，使用 JavaScript 进行开发 Ajax 应用的时候会有跨域访问的问题，而用代理便可以解决跨域访问的问题。
那么应该如何开启 apache2 的 http 代理模块呢？&lt;/p&gt;

&lt;p&gt;模块 &lt;a href=&#34;http://www.2cto.com/shouce/ApacheManual/mod/mod_proxy.html&#34;&gt;mod_proxy&lt;/a&gt;实现了Apache的代理/网关。
它实现了以下规范的代理 FTP， CONNECT（用于SSL）， HTTP/0.9， HTTP/1.0，和 HTTP/1.1。
此模块经配置后可用上述或其它协议连接其它代理模块。&lt;/p&gt;

&lt;h3 id=&#34;启动:299d40c8bf8f0942a2f38dea542412ab&#34;&gt;启动&lt;/h3&gt;

&lt;p&gt;在 apache2 的安装目录下，有这样的两个目录：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/apache2/mods-enabled/ 已经被启用的模块&lt;/li&gt;
&lt;li&gt;/etc/apache2/mods-available/ 当前系统中可用的模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以使用下列命令来启用（或禁用）proxy 模块：&lt;/p&gt;
sudo a2enmod proxy
sudo a2enmod proxy_http

sudo a2dismod proxy
sudo a2dismod proxy_http

&lt;p&gt;启用完之后重启 apache 即可：&lt;/p&gt;
sudo service apache restart

&lt;h3 id=&#34;配置:299d40c8bf8f0942a2f38dea542412ab&#34;&gt;配置&lt;/h3&gt;

&lt;p&gt;新建配置文件：&lt;/p&gt;
sudo vi /etc/apache2/site-enabled/proxy.conf
&lt;IfModule mod_proxy.c&gt;
	ProxyPass /api http://wenzhixin.net.cn/api
	ProxyPassReverse /api http://wenzhixin.net.cn/api
&lt;/IfModule&gt;

&lt;p&gt;这里使用了 &lt;a href=&#34;http://www.2cto.com/shouce/ApacheManual/mod/mod_proxy.html#proxypass&#34;&gt;ProxyPass&lt;/a&gt; 和 &lt;a href=&#34;http://www.2cto.com/shouce/ApacheManual/mod/mod_proxy.html#proxypassreverse&#34;&gt;ProxyPassReverse&lt;/a&gt; 指令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ProxyPass：将一个远端服务器映射到本地服务器的URL空间中&lt;/li&gt;
&lt;li&gt;ProxyPassReverse：调整由反向代理服务器发送的HTTP回应头中的URL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;保存，重启 apache2。&lt;/p&gt;

&lt;p&gt;到这里，我们就可以通过直接访问 &lt;code&gt;http://127.0.0.1/api&lt;/code&gt;来代理远程服务器的 api 接口了，从而解决了跨域的问题。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;相关问题：&lt;a href=&#34;http://wenzhixin.net.cn/2012/08/01/the_use_of_nginx_as_a_proxy_server_easily_solve_the_cross_domain_ajax_problem&#34;&gt;使用 nginx 作为代理服务器轻松解决 Ajax 跨域问题&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何为 NodeJs 设置 Nginx 代理服务器</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/nginx_as_proxy_nodejs</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/nginx_as_proxy_nodejs</guid>
      <description>&lt;p&gt;很多时候，我们需要为 NodeJs 设置反向代理，例如本博客后台 NodeJs 的应用监听的端口为 3333，通过 Nginx 便可以轻松代理为 80 端口，那么应该如何设置呢？&lt;/p&gt;

&lt;p&gt;首先设置 &lt;code&gt;upstream&lt;/code&gt;：&lt;/p&gt;
upstream app_blog {
    server 127.0.0.1:3333;
}

&lt;p&gt;设置 &lt;code&gt;server&lt;/code&gt;：&lt;/p&gt;
server {
    listen 80 default;
    server_name wenzhixin.net.cn wenzhixin.*;

    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://app_blog;
        proxy_redirect off;
    }
}

&lt;p&gt;重启 &lt;code&gt;nginx&lt;/code&gt;：&lt;/p&gt;
sudo service nginx restart

&lt;p&gt;大功告成！根据我们的设置，所有通过 80 的请求（头部信息）都会跳转到 3333 端口。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>