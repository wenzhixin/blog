<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jsonrpc on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/tags/jsonrpc/</link>
    <description>Recent content in Jsonrpc on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <atom:link href="http://blog.wenzhixin.net.cn/tags/jsonrpc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>nodejs 通过 JSON-RPC 调用 aria2 接口</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/nodejs_json_rpc_aria2</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/nodejs_json_rpc_aria2</guid>
      <description>

&lt;p&gt;今天继续之前的下载服务器的开发，第一步是调用文件的 API，第二步是列出应用目录下的所有文件，今天的目标是调用后台接口进行下载。&lt;/p&gt;

&lt;h4 id=&#34;1-aria2-配置:f24ac4233d7de92e042611f728d5a51b&#34;&gt;1. aria2 配置&lt;/h4&gt;

&lt;p&gt;这里，我们用到的是 aria2，aria2 是一个命令行下运行、多协议、多来源下载工具。
它除了可以像 wget 一样直接下载文件外，最主要的功能是可以启用后台服务，启动后等着从 rpc 接口添加任务。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;http://wenzhixin.net.cn/2013/07/01/raspberry_server&#34;&gt;搭建小型下载服务器&lt;/a&gt;一文中，提到启动的方式为：&lt;/p&gt;
aria2c --enable-rpc --rpc-listen-all &amp;

&lt;p&gt;用命令方式导致配置不方便修改保存，推荐启动方式是使用配置文件 $HOME/.aria2/aria2.conf 来进行启动。&lt;/p&gt;
aria2c --conf-path=/home/pi/.aria2/aria2.conf &amp;

&lt;p&gt;1) 首先，创建 aria2.conf 文件&lt;/p&gt;
vi ~/.aria2/aria2.conf

&lt;p&gt;2) 输入内容：&lt;/p&gt;
#允许rpc
enable-rpc=true
#允许非外部访问
rpc-listen-all=true
#RPC端口, 仅当默认端口被占用时修改
rpc-listen-port=6800

#最大同时下载数(任务数), 路由建议值: 3
max-concurrent-downloads=10
#断点续传
continue=true
#同服务器连接数
max-connection-per-server=10
#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要
min-split-size=10M
#单文件最大线程数, 路由建议值: 5
split=10
#下载速度限制
max-overall-download-limit=0
#单文件速度限制
max-download-limit=0
#上传速度限制
max-overall-upload-limit=0
#单文件速度限制
max-upload-limit=0

#文件保存路径, 默认为当前启动位置
dir=/home/pi/Downloads

&lt;p&gt;3) 增加系统启动脚本（raspberrypi 系统还有待研究）&lt;/p&gt;

&lt;h4 id=&#34;2-编写-nodejs-代码:f24ac4233d7de92e042611f728d5a51b&#34;&gt;2. 编写 nodejs 代码&lt;/h4&gt;

&lt;p&gt;1) aria2 JSON-RPC 接口以及 nodejs 模块&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/oneiric/ru/man1/aria2c.1.html&#34;&gt;JSON-RPC 接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Worlize/WebSocket-Node&#34;&gt;websocket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) 封装 websocket client&lt;/p&gt;
var WebSocketClient = require(&#39;websocket&#39;).client,

    client = new WebSocketClient(), 
    conn, 
    cb,
    cbmap = {};

client.on(&#39;connect&#39;, function(connection) {
    console.log(&#39;INFO: WebSocket client connected to Aria2.&#39;);
    connection.on(&#39;error&#39;, function(error) {
        console.error(&#34;ERROR: Connection Error: &#34; + error.toString());
    });
    connection.on(&#39;close&#39;, function() {
        console.log(&#39;INFO: Connection Closed&#39;);
    });
    connection.on(&#39;message&#39;, function(message) {
        if (message.type === &#39;utf8&#39;) {
            var data = JSON.parse(message.utf8Data);
            if (typeof cbmap[data.id] === &#39;function&#39;) {
                var result = {
                    obj: data,
                    err: data.error ? new Error(data.error.message) : false
                };
                cbmap[data.id](result);
            }
            delete cbmap[data.id];
        }
    });

    conn = connection;
    if (typeof cb === &#39;function&#39;) {
        cb();
    }
});

client.on(&#39;connectFailed&#39;, function(error) {
    console.error(&#39;ERROR: Client Error: &#39; + error.toString());
});

function connect(callback) {
    cb = callback;
    client.connect(&#39;ws://localhost:6800/jsonrpc&#39;);
}

function uuid() {
    return &#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#39;.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = (c === &#39;x&#39;) ? r : (r &amp; 0x3 | 0x8);
        return v.toString(16);
    });
}

function send(command, callback) {
    var id = uuid();
    if (typeof callback === &#39;function&#39;) {
        cbmap[id] = callback;
    }

    command.jsonrpc = &#39;2.0&#39;;
    command.id = id;
    conn.sendUTF(JSON.stringify(command));
}

exports.connect = connect;
exports.send = send;

&lt;p&gt;3) 调用 websocket 开始下载：&lt;/p&gt;
var websocket = require(&#39;./websocket&#39;);

websocket.connect(function() {
    websocket.send({
        method : &#39;aria2.addUri&#39;,
        params : [[&#39;http://wenzhixin.net.cn/images/header_bg.jpg&#39;]]
    }, function(result) {
        console.log(result);
    });
});

&lt;p&gt;到这里，查看 /home/pi/Downloads，可以看到已经成功下载了 header_bg.jpg 文件，
已经可以调用后台的 aria2 接口进行添加下载地址并下载我们想要的东西了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>