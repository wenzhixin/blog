<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DML on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/tags/dml/</link>
    <description>Recent content in DML on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <lastBuildDate>Fri, 09 Mar 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.wenzhixin.net.cn/tags/dml/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL学习笔记——DML</title>
      <link>http://blog.wenzhixin.net.cn/2012/03/09/sql_study_notes_dml</link>
      <pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/2012/03/09/sql_study_notes_dml</guid>
      <description>&lt;p&gt;​1. What is SQL&lt;/p&gt;

&lt;p&gt;  (1) SQL stands for Structured Query Language&lt;/p&gt;

&lt;p&gt;  (2) SQL is an ANSI standard&lt;/p&gt;

&lt;p&gt;  (3) RDBMS(Relational Database Managerment System) is the basis for SQL
like SQLServer, DB2, Oracle, MySQL, and Access eg.&lt;/p&gt;

&lt;p&gt;​2. SQL DML and DDL&lt;/p&gt;

&lt;p&gt;  (1) The query and update commands from the DML(Data Manipulation
Language) part of SQL:&lt;/p&gt;

&lt;p&gt;  • SELECT - extracts data from a database&lt;/p&gt;

&lt;p&gt;  • UPDATE - updates data in a database&lt;/p&gt;

&lt;p&gt;  • DELETE - deletes data from a database&lt;/p&gt;

&lt;p&gt;  • INSERT INTO - inserts new data into a database&lt;/p&gt;

&lt;p&gt;  (2) The most important DDL(Data Definition Language) statements in
SQL:&lt;/p&gt;

&lt;p&gt;  • CREATE DATABASE - creates a new database&lt;/p&gt;

&lt;p&gt;  • ALTER DATABASE - modifies a database&lt;/p&gt;

&lt;p&gt;  • CREATE TABLE - creates a new table&lt;/p&gt;

&lt;p&gt;  • ALTER TABLE - modifies a table&lt;/p&gt;

&lt;p&gt;  • DROP TABLE - deletes a table&lt;/p&gt;

&lt;p&gt;  • CREATE INDEX - creates an index&lt;/p&gt;

&lt;p&gt;  • DROP INDEX - deletes an index&lt;/p&gt;

&lt;p&gt;​3. SELECT Syntax and keywords&lt;/p&gt;

&lt;p&gt;  (1) SELECT Syntax: SELECT column_name(s) FTOM table_name&lt;/p&gt;

&lt;p&gt;  (2) DISTINCT: can be used to return only distinct values&lt;/p&gt;

&lt;p&gt;  (3) WHERE: is used to filter records&lt;/p&gt;

&lt;p&gt;  • Operators allowed in the WHERE clause: =, &amp;lt;&amp;gt;, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=,
AND, OR, BETWEEN, LIKE, IN&lt;/p&gt;

&lt;p&gt;  (4) ORDER BY: is used to sort the result-set&lt;/p&gt;

&lt;p&gt;  • Keyworks for ORDER BY: ASC, DESC&lt;/p&gt;

&lt;p&gt;​4. INSERT INTO Syntax&lt;/p&gt;

&lt;p&gt;  • INSERT INTO table_name VALUES(value1, value2, value3, &amp;hellip;) &lt;/p&gt;

&lt;p&gt;  • INSERT INTO table_name(column1, column2, column3, &amp;hellip;)
VALUES(value1, value2, value3,&amp;hellip;)&lt;/p&gt;

&lt;p&gt;​5. UPDATE Syntax&lt;/p&gt;

&lt;p&gt;  • UPDATE table_name SET column1 = value1, column2 = value2, &amp;hellip; WHERE
some_column = some_value&lt;/p&gt;

&lt;p&gt;​6. DELETE Syntax&lt;/p&gt;

&lt;p&gt;  • DELETE FROM table_name WHERE some_column = some_value&lt;/p&gt;

&lt;p&gt;​7. SQL Aggregate functions and Syntax&lt;/p&gt;

&lt;p&gt;  (1) AVG() - returns the average value&lt;/p&gt;

&lt;p&gt;  • SELECT AVG(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (2) COUNT() - returns the number of rows&lt;/p&gt;

&lt;p&gt;  • SELECT COUNT(*) FROM table_name&lt;/p&gt;

&lt;p&gt;  • SELECT COUNT(DISTINCT column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (3) FIRST() - returns the first value&lt;/p&gt;

&lt;p&gt;  • SELECT FIRST(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (4) LAST() - returns the last value&lt;/p&gt;

&lt;p&gt;  • SELECT LAST(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (5) MAX() - returns the largest value&lt;/p&gt;

&lt;p&gt;  • SELECT MAX(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (6) MIN() - returns the smallest value&lt;/p&gt;

&lt;p&gt;  • SELECT MIN(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (7) SUM() - return the sum&lt;/p&gt;

&lt;p&gt;  • SELECT SUM(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (8) GROUP BY - is used in conjunction with the aggregate functions to
group the result-set by one or more columns&lt;/p&gt;

&lt;p&gt;  • SELECT column_name, aggregate_function(column_name) FROM
table_name WHERE column_name operator value GROUP BY column_name&lt;/p&gt;

&lt;p&gt;  (9) HAVING - was added to SQL because the WHERE keyword could not be
used with aggregate functions&lt;/p&gt;

&lt;p&gt;  • SELECT column_name, agregate_function(column_name) FROM
table_name WHERE column_name operator value GROUP BY column_name
HAVING aggregate_function(column_name) operator value&lt;/p&gt;

&lt;p&gt;​8. SQL Scalar functions&lt;/p&gt;

&lt;p&gt;  (1) UCASE() - converts a field to upper case&lt;/p&gt;

&lt;p&gt;  • SELECT UCASE(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (2) LCASE() - converts a field to lower case&lt;/p&gt;

&lt;p&gt;  • SELECT LCASE(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (3) MID() - extract characters from a text field&lt;/p&gt;

&lt;p&gt;  • SELECT MID(column_name, start[, length]) FROM table_name&lt;/p&gt;

&lt;p&gt;  (4) LEN() - returns the length of a text field&lt;/p&gt;

&lt;p&gt;  • SELECT LEN(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (5) ROUND() - rounds a numeric field to the number of decimals
specified&lt;/p&gt;

&lt;p&gt;  • SELECT ROUND(column_name, decimals) FROM table_name&lt;/p&gt;

&lt;p&gt;  (6) NOW() - returns the current system date and time&lt;/p&gt;

&lt;p&gt;  • SELECT NOW() FROM table_name&lt;/p&gt;

&lt;p&gt;  (7) FORMAT() - formats how a field is to be diaplayed&lt;/p&gt;

&lt;p&gt;  • SELECT FORMAT(column_name, format) FROM table_name&lt;/p&gt;

&lt;p&gt;  (8) TOP - is used to specify the number of records to return&lt;/p&gt;

&lt;p&gt;  • SELECT TOP number|percent column_name(s) FROM table_name&lt;/p&gt;

&lt;p&gt;  (9) LIKE - is used to search for a specified pattern in a column&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name WHERE column_name LIKE
pattern&lt;/p&gt;

&lt;p&gt;  (10) IN - allows you to specify multiple values in a WHERE clause&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name WHERE column_name IN
(value1, value2, &amp;hellip;)&lt;/p&gt;

&lt;p&gt;  (11) BETWEEN AND - selects a range of data between two values&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name WHERE column_name BETWEEN
value1 AND value2&lt;/p&gt;

&lt;p&gt;​9. SQL Wildcard&lt;/p&gt;

&lt;p&gt;  • % - a substitute for zero or more characters&lt;/p&gt;

&lt;p&gt;  • _ - a substitute for exactly one character&lt;/p&gt;

&lt;p&gt;  • [charlist] - any single charater in charlist&lt;/p&gt;

&lt;p&gt;  • [\^charlist] or [!charlist] - any single character not in charlist&lt;/p&gt;

&lt;p&gt;​10. SQL Alias Syntax&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name AS alias_name&lt;/p&gt;

&lt;p&gt;  • SELECT column_name AS alias_name FROM table_name&lt;/p&gt;

&lt;p&gt;​11. SQL Joins&lt;/p&gt;

&lt;p&gt;  • SQL joins are used to query data from two or more tables, base on a
relationship between certain columns in these tablse&lt;/p&gt;

&lt;p&gt;  • Different SQL JOINS:&lt;/p&gt;

&lt;p&gt;  (1) JOIN or INNER JOIN - return rows when there is at least one match
in both tables&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;  (2) LEFT JOIN - return all rows from the left table, even if there are
no matches in the right table&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;  (3) RIGHT JOIN - return all rows from the right table, even if there
are no matches in the left table&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;  (4) FULL JOIN - return rows when there is a match in one of the tables&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;​12. SQL UNION Operator&lt;/p&gt;

&lt;p&gt;  (1) UNION operator is used to combine the result-set of two or more
SELECT statements&lt;/p&gt;

&lt;p&gt;  (2) Syntax&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 UNION SELECT
column_name(s) FROM table_name2&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 UNION ALL SELECT
column_name(s) FROM table_name2&lt;/p&gt;

&lt;p&gt;​13. SQL SELECT INTO Statement&lt;/p&gt;

&lt;p&gt;  (1) SELECT INTO statement can be used to create backup copies of
tables&lt;/p&gt;

&lt;p&gt;  (2) Syntax:&lt;/p&gt;

&lt;p&gt;  • SELECT * INTO new_table_name [IN externaldatabase] FROM
old_tablename&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) INTO new_table_name [IN externaldatabase]
FROM old_tablename&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL学习笔记——DML</title>
      <link>http://blog.wenzhixin.net.cn/2012/03/09/sql_study_notes_dml</link>
      <pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/2012/03/09/sql_study_notes_dml</guid>
      <description>&lt;p&gt;​1. What is SQL&lt;/p&gt;

&lt;p&gt;  (1) SQL stands for Structured Query Language&lt;/p&gt;

&lt;p&gt;  (2) SQL is an ANSI standard&lt;/p&gt;

&lt;p&gt;  (3) RDBMS(Relational Database Managerment System) is the basis for SQL
like SQLServer, DB2, Oracle, MySQL, and Access eg.&lt;/p&gt;

&lt;p&gt;​2. SQL DML and DDL&lt;/p&gt;

&lt;p&gt;  (1) The query and update commands from the DML(Data Manipulation
Language) part of SQL:&lt;/p&gt;

&lt;p&gt;  • SELECT - extracts data from a database&lt;/p&gt;

&lt;p&gt;  • UPDATE - updates data in a database&lt;/p&gt;

&lt;p&gt;  • DELETE - deletes data from a database&lt;/p&gt;

&lt;p&gt;  • INSERT INTO - inserts new data into a database&lt;/p&gt;

&lt;p&gt;  (2) The most important DDL(Data Definition Language) statements in
SQL:&lt;/p&gt;

&lt;p&gt;  • CREATE DATABASE - creates a new database&lt;/p&gt;

&lt;p&gt;  • ALTER DATABASE - modifies a database&lt;/p&gt;

&lt;p&gt;  • CREATE TABLE - creates a new table&lt;/p&gt;

&lt;p&gt;  • ALTER TABLE - modifies a table&lt;/p&gt;

&lt;p&gt;  • DROP TABLE - deletes a table&lt;/p&gt;

&lt;p&gt;  • CREATE INDEX - creates an index&lt;/p&gt;

&lt;p&gt;  • DROP INDEX - deletes an index&lt;/p&gt;

&lt;p&gt;​3. SELECT Syntax and keywords&lt;/p&gt;

&lt;p&gt;  (1) SELECT Syntax: SELECT column_name(s) FTOM table_name&lt;/p&gt;

&lt;p&gt;  (2) DISTINCT: can be used to return only distinct values&lt;/p&gt;

&lt;p&gt;  (3) WHERE: is used to filter records&lt;/p&gt;

&lt;p&gt;  • Operators allowed in the WHERE clause: =, &amp;lt;&amp;gt;, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=,
AND, OR, BETWEEN, LIKE, IN&lt;/p&gt;

&lt;p&gt;  (4) ORDER BY: is used to sort the result-set&lt;/p&gt;

&lt;p&gt;  • Keyworks for ORDER BY: ASC, DESC&lt;/p&gt;

&lt;p&gt;​4. INSERT INTO Syntax&lt;/p&gt;

&lt;p&gt;  • INSERT INTO table_name VALUES(value1, value2, value3, &amp;hellip;) &lt;/p&gt;

&lt;p&gt;  • INSERT INTO table_name(column1, column2, column3, &amp;hellip;)
VALUES(value1, value2, value3,&amp;hellip;)&lt;/p&gt;

&lt;p&gt;​5. UPDATE Syntax&lt;/p&gt;

&lt;p&gt;  • UPDATE table_name SET column1 = value1, column2 = value2, &amp;hellip; WHERE
some_column = some_value&lt;/p&gt;

&lt;p&gt;​6. DELETE Syntax&lt;/p&gt;

&lt;p&gt;  • DELETE FROM table_name WHERE some_column = some_value&lt;/p&gt;

&lt;p&gt;​7. SQL Aggregate functions and Syntax&lt;/p&gt;

&lt;p&gt;  (1) AVG() - returns the average value&lt;/p&gt;

&lt;p&gt;  • SELECT AVG(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (2) COUNT() - returns the number of rows&lt;/p&gt;

&lt;p&gt;  • SELECT COUNT(*) FROM table_name&lt;/p&gt;

&lt;p&gt;  • SELECT COUNT(DISTINCT column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (3) FIRST() - returns the first value&lt;/p&gt;

&lt;p&gt;  • SELECT FIRST(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (4) LAST() - returns the last value&lt;/p&gt;

&lt;p&gt;  • SELECT LAST(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (5) MAX() - returns the largest value&lt;/p&gt;

&lt;p&gt;  • SELECT MAX(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (6) MIN() - returns the smallest value&lt;/p&gt;

&lt;p&gt;  • SELECT MIN(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (7) SUM() - return the sum&lt;/p&gt;

&lt;p&gt;  • SELECT SUM(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (8) GROUP BY - is used in conjunction with the aggregate functions to
group the result-set by one or more columns&lt;/p&gt;

&lt;p&gt;  • SELECT column_name, aggregate_function(column_name) FROM
table_name WHERE column_name operator value GROUP BY column_name&lt;/p&gt;

&lt;p&gt;  (9) HAVING - was added to SQL because the WHERE keyword could not be
used with aggregate functions&lt;/p&gt;

&lt;p&gt;  • SELECT column_name, agregate_function(column_name) FROM
table_name WHERE column_name operator value GROUP BY column_name
HAVING aggregate_function(column_name) operator value&lt;/p&gt;

&lt;p&gt;​8. SQL Scalar functions&lt;/p&gt;

&lt;p&gt;  (1) UCASE() - converts a field to upper case&lt;/p&gt;

&lt;p&gt;  • SELECT UCASE(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (2) LCASE() - converts a field to lower case&lt;/p&gt;

&lt;p&gt;  • SELECT LCASE(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (3) MID() - extract characters from a text field&lt;/p&gt;

&lt;p&gt;  • SELECT MID(column_name, start[, length]) FROM table_name&lt;/p&gt;

&lt;p&gt;  (4) LEN() - returns the length of a text field&lt;/p&gt;

&lt;p&gt;  • SELECT LEN(column_name) FROM table_name&lt;/p&gt;

&lt;p&gt;  (5) ROUND() - rounds a numeric field to the number of decimals
specified&lt;/p&gt;

&lt;p&gt;  • SELECT ROUND(column_name, decimals) FROM table_name&lt;/p&gt;

&lt;p&gt;  (6) NOW() - returns the current system date and time&lt;/p&gt;

&lt;p&gt;  • SELECT NOW() FROM table_name&lt;/p&gt;

&lt;p&gt;  (7) FORMAT() - formats how a field is to be diaplayed&lt;/p&gt;

&lt;p&gt;  • SELECT FORMAT(column_name, format) FROM table_name&lt;/p&gt;

&lt;p&gt;  (8) TOP - is used to specify the number of records to return&lt;/p&gt;

&lt;p&gt;  • SELECT TOP number|percent column_name(s) FROM table_name&lt;/p&gt;

&lt;p&gt;  (9) LIKE - is used to search for a specified pattern in a column&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name WHERE column_name LIKE
pattern&lt;/p&gt;

&lt;p&gt;  (10) IN - allows you to specify multiple values in a WHERE clause&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name WHERE column_name IN
(value1, value2, &amp;hellip;)&lt;/p&gt;

&lt;p&gt;  (11) BETWEEN AND - selects a range of data between two values&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name WHERE column_name BETWEEN
value1 AND value2&lt;/p&gt;

&lt;p&gt;​9. SQL Wildcard&lt;/p&gt;

&lt;p&gt;  • % - a substitute for zero or more characters&lt;/p&gt;

&lt;p&gt;  • _ - a substitute for exactly one character&lt;/p&gt;

&lt;p&gt;  • [charlist] - any single charater in charlist&lt;/p&gt;

&lt;p&gt;  • [\^charlist] or [!charlist] - any single character not in charlist&lt;/p&gt;

&lt;p&gt;​10. SQL Alias Syntax&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name AS alias_name&lt;/p&gt;

&lt;p&gt;  • SELECT column_name AS alias_name FROM table_name&lt;/p&gt;

&lt;p&gt;​11. SQL Joins&lt;/p&gt;

&lt;p&gt;  • SQL joins are used to query data from two or more tables, base on a
relationship between certain columns in these tablse&lt;/p&gt;

&lt;p&gt;  • Different SQL JOINS:&lt;/p&gt;

&lt;p&gt;  (1) JOIN or INNER JOIN - return rows when there is at least one match
in both tables&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;  (2) LEFT JOIN - return all rows from the left table, even if there are
no matches in the right table&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;  (3) RIGHT JOIN - return all rows from the right table, even if there
are no matches in the left table&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;  (4) FULL JOIN - return rows when there is a match in one of the tables&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON
table_name1.column_name = table_name2.column_name&lt;/p&gt;

&lt;p&gt;​12. SQL UNION Operator&lt;/p&gt;

&lt;p&gt;  (1) UNION operator is used to combine the result-set of two or more
SELECT statements&lt;/p&gt;

&lt;p&gt;  (2) Syntax&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 UNION SELECT
column_name(s) FROM table_name2&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) FROM table_name1 UNION ALL SELECT
column_name(s) FROM table_name2&lt;/p&gt;

&lt;p&gt;​13. SQL SELECT INTO Statement&lt;/p&gt;

&lt;p&gt;  (1) SELECT INTO statement can be used to create backup copies of
tables&lt;/p&gt;

&lt;p&gt;  (2) Syntax:&lt;/p&gt;

&lt;p&gt;  • SELECT * INTO new_table_name [IN externaldatabase] FROM
old_tablename&lt;/p&gt;

&lt;p&gt;  • SELECT column_name(s) INTO new_table_name [IN externaldatabase]
FROM old_tablename&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>