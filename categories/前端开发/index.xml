<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端开发 on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 前端开发 on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <lastBuildDate>Tue, 14 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.wenzhixin.net.cn/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用 requestAnimationFrame 实现动画</title>
      <link>http://blog.wenzhixin.net.cn/2014/01/14/canvas_fps_frame</link>
      <pubDate>Tue, 14 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/2014/01/14/canvas_fps_frame</guid>
      <description>&lt;p&gt;requestAnimationFrame 函数是主流浏览器推出来的用来代替旧的&lt;code&gt;setTimeout&lt;/code&gt;和&lt;code&gt;setInterval&lt;/code&gt;方法，
从而提高动作的性能。&lt;/p&gt;

&lt;p&gt;该函数把绘制动画的任务直接交给浏览器，使用它还是有挺多好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先，它仅仅绘制用户可见的动画。这意味着没把 CPU 或电池寿命浪费在绘制处于背景标签，最小化窗口，或者页面隐藏区域的动画上。&lt;/li&gt;
&lt;li&gt;第二，当浏览器准备好绘制时（空闲时），才绘制一帧，此时没有等待中的帧。意味着用 requestAnimationFrame 绘制动画不可能出现多个排队的回调函数，或者阻塞浏览器。&lt;/li&gt;
&lt;li&gt;第三，由于浏览器准备好时（空闲时）才绘制帧，不会有等待绘制的帧，没有多余的帧绘制。因此动画更平滑，CPU 和电池使用被进一步优化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在使用的时候，需要考虑多浏览器之间的兼容问题：&lt;/p&gt;
window.requestAnimFrame = (function() {
	return window.requestAnimationFrame ||
		window.webkitRequestAnimationFrame ||
		window.mozRequestAnimationFrame ||
		window.oRequestAnimationFrame ||
		window.msRequestAnimationFrame ||
		function(/* function */callback, /* DOMElement */element) {
			return window.setTimeout(callback, 1000 / 60);
		};
})();

window.cancelAnimFrame = (function() {
	return window.cancelAnimationFrame ||
		window.webkitCancelRequestAnimationFrame ||
		window.mozCancelRequestAnimationFrame ||
		window.oCancelRequestAnimationFrame ||
		window.msCancelRequestAnimationFrame ||
		clearTimeout;
})();

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;问题：如何模拟 fps 数？&lt;/strong&gt;&lt;/p&gt;
var fps = 30;
function draw() {
	setTimeout(function() {
        requestAnimFrame(draw);

        // do something
    }, 1000 / fps);
}
</description>
    </item>
    
  </channel>
</rss>