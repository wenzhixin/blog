<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端技术 on 文翼的博客</title>
    <link>http://blog.wenzhixin.net.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 前端技术 on 文翼的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>wenzhixin.net.cn 粤ICP备15117953号</copyright>
    <atom:link href="http://blog.wenzhixin.net.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ajax 文件上传——通过 html5 的方法</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/ajax_file_upload_html5</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/ajax_file_upload_html5</guid>
      <description>

&lt;h4 id=&#34;html5-方法:f5a698885091fe9812ae461e6526e53b&#34;&gt;html5 方法&lt;/h4&gt;

&lt;p&gt;上篇文章讲到 Ajax 文件上传是如何通过 iframe 的方法，这里我们通过 html5 的方法来进行文件的上传。&lt;/p&gt;

&lt;p&gt;在 html5 标准中，XMLHttpRequest 对象被重新定义，称为“XMLHttpRequest Level 2”，其中包含了文件相关的新特性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持上传、下载字节流，比如文件、blob以及表单数据&lt;/li&gt;
&lt;li&gt;增加了上传、下载中的进度事件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 XMLHttpRequest Level 2，阮一峰有一篇文章介绍的很详细，就不多做解释了，详细见：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/XMLHttpRequest2/&#34;&gt;官网 XMLHttpRequest2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html&#34;&gt;XMLHttpRequest Level 2 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先，创建一个 XMLHttpRequest2 的实例：&lt;/p&gt;
var xhr = new XMLHttpRequest();

&lt;p&gt;添加 file 控件，这里我们使用 multiple 属性来支持多文件的选择。&lt;/p&gt;
&lt;input id=&#34;filename&#34; type=&#34;file&#34; multiple=&#34;multiple&#34; /&gt;

&lt;p&gt;获取并保存选择的多个文件。&lt;/p&gt;
var files = document.getElementById(&#39;filename&#39;).files;

&lt;p&gt;接下来，要介绍的是另一个 html5 推出的新对象：FormData。&lt;/p&gt;

&lt;p&gt;FormData 对象是用户的表单数据的集合，
它以键值对的形式存储了表单数据，其值能够包括数字、字符串以及文件。&lt;br /&gt;
我们通过这个对象，来向服务器提交我们的文件数据。&lt;/p&gt;
var formData = new FormData();
formData.append(&#39;filename&#39;, files[index]); // index 为第 n 个文件的索引
xhr.open(&#39;post&#39;, url); // url 为提交的后台地址
xhr.send(formData);

&lt;p&gt;这样就完成了一次文件的上传，多个文件我们遍历多个文件重复这个步骤即可。&lt;/p&gt;

&lt;p&gt;接下来是对上传事件的监听：&lt;/p&gt;
xhr.upload.addEventListener(&#34;progress&#34;, uploadProgress, false); // 处理上传进度
xhr.addEventListener(&#34;load&#34;, uploadComplete, false); // 处理上传完成
xhr.addEventListener(&#34;error&#34;, uploadFailed, false); // 处理上传失败
xhr.addEventListener(&#34;abort&#34;, uploadCanceled, false); // 处理取消上传

&lt;p&gt;在不同的事件中做不同的处理在完成所有的文件上传后再显示结果，使用 html5 的方法是不是很简单呢。&lt;/p&gt;

&lt;h4 id=&#34;使用-html5-的-jquery-插件:f5a698885091fe9812ae461e6526e53b&#34;&gt;使用 html5 的 jQuery 插件&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mihaild/jquery-html5-upload&#34;&gt;jquery-html5-upload&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;浏览器支持情况:f5a698885091fe9812ae461e6526e53b&#34;&gt;浏览器支持情况&lt;/h4&gt;

&lt;p&gt;因为用到了新的特性，所以只有在支持这些新对象的浏览器下才可以支持我们的代码，
可以通过&lt;a href=&#34;http://caniuse.com/&#34;&gt;这里&lt;/a&gt;查看浏览器的支持情况。&lt;/p&gt;

&lt;p&gt;最后，对于不支持的浏览器，我们做了降级处理，优先使用 html5 方法，
在浏览器不支持的情况下，使用上一篇提到的 iframe 的方法，
当然也可以考虑将介绍到的两个 jQuery 插件合并起来。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ajax 文件上传——通过 iframe 的方法</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/ajax_file_upload_iframe</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/ajax_file_upload_iframe</guid>
      <description>

&lt;h4 id=&#34;前言:9d2eee6ba8fab7c3c4918c26a26acf7a&#34;&gt;前言&lt;/h4&gt;

&lt;p&gt;由于安全问题，浏览器不允许通过 XMLHttpRequest（又名XHR）的方式上传文件。&lt;/p&gt;

&lt;p&gt;那么如何在不刷新界面的情况下实现文件的上传呢？&lt;/p&gt;

&lt;h4 id=&#34;解决方法:9d2eee6ba8fab7c3c4918c26a26acf7a&#34;&gt;解决方法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一种方法是使用 Flash，但是需要安装 Flash 插件。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用 iframe 的方法，这里来介绍它是如何工作的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;iframe-的方法:9d2eee6ba8fab7c3c4918c26a26acf7a&#34;&gt;iframe 的方法&lt;/h4&gt;

&lt;p&gt;假设我们有一个文件类型的输入字段的表单&lt;/p&gt;
&lt;input name=&#34;filename&#34; type=&#34;file&#34; /&gt;

&lt;p&gt;使用 iframe 的方法可以概括为如下步骤：&lt;/p&gt;

&lt;p&gt;1) 禁用原表单的 submit 事件，以方便我们使用自定义 iframe 的 submit 事件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2) 使用 JavaScript 创建一个 iframe 元素并将其插入到当前页面（对用户不可见）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;3) 修改 iframe 的 target 属性，使得表单提交的结果显示在新的 iframe 中，而不是当前窗口。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;4) 提交 iframe 中的表单，例如用 jQuery 的 $(&amp;lsquo;form&amp;rsquo;).submit()。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5) 让隐藏的 iframe 导航到新的响应界面，在这里，父窗口并没有打开新的页面或者进行重定向。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6) 获取 iframe 的响应内容到父窗口中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7) 删除 iframe，重置原来的表单，提交完成。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wenzhixin.net.cn/2013/11/27/iframe-method-step-6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;需要注意的问题:9d2eee6ba8fab7c3c4918c26a26acf7a&#34;&gt;需要注意的问题&lt;/h4&gt;

&lt;p&gt;由于使用了 iframe，所以我们无法获得响应接口的响应头和状态码。&lt;/p&gt;

&lt;p&gt;为了判断是否已经提交成功，我们需要在返回接口中定义我们需要的响应信息。&lt;/p&gt;

&lt;p&gt;例如，在 body 中返回 status：&lt;/p&gt;
{
	&#34;status&#34;: 200
}

&lt;h4 id=&#34;使用-iframe-的-jquery-插件:9d2eee6ba8fab7c3c4918c26a26acf7a&#34;&gt;使用 iframe 的 jQuery 插件&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.phpletter.com/Demo/AjaxFileUpload-Demo/&#34;&gt;AjaxFileUpload 插件&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考：&lt;a href=&#34;http://www.alfajango.com/blog/ajax-file-uploads-with-the-iframe-method/&#34;&gt;AJAX File Uploads with the iFrame Method&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记——AngularJS简介</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/angularjs_study_note_introduction</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/angularjs_study_note_introduction</guid>
      <description>

&lt;p&gt;自己在前端开发中还有很多新知识要学习，今天开始进入《用 AngularJS 开发下一代 Web 应用》一书的学习之旅。&lt;/p&gt;

&lt;p&gt;AngularJS是一款开源 JavaScript函式库，由Google维护, 主要用于单页面应用开发。
目标是增强基于浏览器的应用，并带有MVC模式功能，这为了使得开发和测试变得更加容易。&lt;/p&gt;

&lt;h3 id=&#34;一些概念:038d44456dceb35ec535cbe3141747a8&#34;&gt;一些概念&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;客户端模板&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;传统的 web 应用会在服务器中创建 HTML，然后和数据生成页面一起发送到浏览器中。
而现在单页面应用则会把模板存放在客户端中，而服务器则是仅仅为这些模板提供静态资源和数据。&lt;/p&gt;

&lt;p&gt;hello world：&lt;/p&gt;
&lt;!doctype html&gt;
&lt;html lang=&#34;en&#34; ng-app&gt;
&lt;head&gt;
	&lt;meta charset=&#34;UTF-8&#34; /&gt;
	&lt;title&gt;hello&lt;/title&gt;
	&lt;script src=&#34;assets/angular.min.js&#34;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;input type=&#34;text&#34; ng-model=&#34;name&#34; /&gt;
  &lt;h2&gt;Hello {{name}}!&lt;/h2&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;从 hello world 中可以看到：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;html 里没有 class 或者 ID 来标记哪里添加事件。&lt;/li&gt;
&lt;li&gt;数据绑定，改变数据页面也会随之改变。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Model View Controller (MVC)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MVC 的核心理念：把管理数据的代码（model）、应用逻辑代码（controller）和展示数据的代码（view）清晰的分离开。&lt;/p&gt;

&lt;p&gt;AngularJS 中，视图是 Document Object Model（DOM，文档对象模型），控制器为 JavaScript 类，模型数据被存储在对象的属性中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据绑定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 jQuery 开发，我们会把获取的数据插入到 DOM 中，或者直接操作 DOM 的内容。&lt;/p&gt;

&lt;p&gt;而在 AngularJS 中，仅仅声明 UI 中的 DOM 映射到某个 JavaScript 属性，然后修改 JavaScript 属性，就可以自动更新 DOM 中的值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;开发风格：类只是简单的获取所需要的东西，并不需要创建所需要的东西。这种风格叫迪米特法则，也叫最小知识原则。&lt;/p&gt;

&lt;p&gt;例如：$scope 对象表示 Controller 模型中的内部状态；$location 对象表示浏览器 URL 地址状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;指令&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AngularJS 引入了强大的 DOM 转换引擎，用来扩展 HTML 语法。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{{}}：表示数据绑定&lt;/li&gt;
&lt;li&gt;ng-controller：指定控制器范围&lt;/li&gt;
&lt;li&gt;ng-model：把输入数据绑定到模型的属性上&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS学习笔记——购物车实例与解析</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/angular_cart_demo</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/angular_cart_demo</guid>
      <description>&lt;p&gt;通过构建一款实例来了解 AngularJS 的特性，貌似还是比较有效的。&lt;/p&gt;

&lt;p&gt;先来看看&lt;a href=&#34;http://blog.wenzhixin.net.cn/demos/angular/cart.html&#34;&gt;效果&lt;/a&gt;。&lt;/p&gt;
&lt;!doctype html&gt;
&lt;html ng-app&gt;
&lt;head&gt;
	&lt;meta charset=&#34;UTF-8&#34; /&gt;
	&lt;title&gt;Cart&lt;/title&gt;
&lt;/head&gt;
&lt;body ng-controller=&#34;CartController&#34;&gt;
	&lt;h1&gt;Your Order&lt;/h1&gt;
	&lt;div ng-repeat=&#34;item in items&#34;&gt;
	 &lt;span&gt;{{item.title}}&lt;/span&gt;
	 &lt;input ng-model=&#34;item.quantity&#34; /&gt;
	 &lt;span&gt;{{item.price | currency}}&lt;/span&gt;
	 &lt;span&gt;{{item.price * item.quantity | currency}}&lt;/span&gt;
	 &lt;button ng-click=&#34;remove($index)&#34;&gt;Remove&lt;/button&gt;
	&lt;/div&gt;
	&lt;script src=&#34;assets/angular.min.js&#34;&gt;&lt;/script&gt;
	&lt;script&gt;
	  function CartController($scope) {
	    $scope.items = [
	      {title: &#39;Pots&#39;, quantity: 8, price: 3.95},
	      {title: &#39;Dots&#39;, quantity: 17, price: 12.95},
	      {title: &#39;Pebbels&#39;, quantity: 5, price: 6.95}
	    ];
	    $scope.remove = function(index) {
	      $scope.items.splice(index, 1);
	    };
	  }
	&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;可以看到很少代码就可以实现基本的购物车功能了，例如：实时更新总价，删除订单。&lt;/p&gt;

&lt;p&gt;一起来看看代码是什么意思吧：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ng-app：告诉 angular 页面中那部分需要接受它的管理，一般放在 html 标签上，表示管理整个页面。&lt;/li&gt;
&lt;li&gt;ng-controller=&amp;ldquo;CartController&amp;rdquo;：声明控制器 CartController，用于管理 body 标签之间的内容。&lt;/li&gt;
&lt;li&gt;ng-repeat=&amp;ldquo;item in items&amp;rdquo;：表示对于 items 数组中的每个元素，都把 div 中的 DOM 结构复制一份（包括div自身）。&lt;/li&gt;
&lt;li&gt;{{item.title}}：通过 {{}} 进行数据绑定，更新数据将会实时更新页面。&lt;/li&gt;
&lt;li&gt;ng-model=&amp;ldquo;item.quantity&amp;rdquo;：ng-model 将会在输入框和 item.quantity 的值之间创建数据绑定关系。&lt;/li&gt;
&lt;li&gt;{{item.price | currency}}：单向绑定，currency 表示过滤器，可以实现美元格式化。&lt;/li&gt;
&lt;li&gt;ng-click=&amp;ldquo;remove($index)&amp;ldquo;：点击按钮调用 remove 函数，$index 表示循环计数的位置。&lt;/li&gt;
&lt;li&gt;$scope：控制器需要通过 $scope 把数据绑定到 UI 中的元素上。&lt;/li&gt;
&lt;li&gt;$scope.items：定义数组，表示用户购物车的物品列表。&lt;/li&gt;
&lt;li&gt;$scope.remove：定义删除物品函数，点击 Remove 按钮时触发。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap a 标签按钮使用 prop 方法</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/a_prop_problem</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/a_prop_problem</guid>
      <description>

&lt;h3 id=&#34;问题:a28454daa0e071303e4565ef461d5dfa&#34;&gt;问题&lt;/h3&gt;

&lt;p&gt;将 jQuery 从 1.5.2 升级到 1.7.2 之后，统一将&lt;code&gt;attr(&#39;disabled&#39;, &#39;disabled&#39;)&lt;/code&gt;改为&lt;code&gt;prop(&#39;disabled&#39;, true)&lt;/code&gt;，将&lt;code&gt;attr(&#39;disabled&#39;, &#39;&#39;)&lt;/code&gt;改为&lt;code&gt;prop(&#39;disabled&#39;, false)&lt;/code&gt;。由于使用了 bootstrap，所以很多按钮都是 a 标签按钮，如：&lt;/p&gt;
&lt;a class=&#34;btn&#34; href=&#34;javascript:void(0)&#34;&gt;button&lt;/a&gt;

&lt;p&gt;当对 a 标签使用 prop 的时候，并没有禁用按钮。&lt;/p&gt;

&lt;h3 id=&#34;原因:a28454daa0e071303e4565ef461d5dfa&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;从&lt;a href=&#34;http://wenzhixin.net.cn/2013/08/12/disable_link&#34;&gt;Bootstrap 禁用 a 按钮&lt;/a&gt;一文中，我们知道禁用 ａ 标签的按钮是利用 css，而通过&lt;a href=&#34;http://wenzhixin.net.cn/2013/05/24/jquery_attr_prop&#34;&gt;jQuery 中 attr() 和 prop() 方法的区别&lt;/a&gt;我们知道对于 a 标签应该使用&lt;code&gt;attr(&#39;disabled&#39;, true)&lt;/code&gt;。由于项目比较庞大，修改的地方也比较多，需要先判断这个按钮是否为 a 标签，那么有没有更好的办法呢？&lt;/p&gt;

&lt;h3 id=&#34;解决:a28454daa0e071303e4565ef461d5dfa&#34;&gt;解决&lt;/h3&gt;

&lt;p&gt;通过统一处理 jQuery 的函数来解决这个问题，代码如下：&lt;/p&gt;
(function() {
    var fn = {
        attr: jQuery.fn.attr,
        prop: jQuery.fn.prop
    };

    jQuery.fn.prop = function() {
        var value,
            args = Array.prototype.slice.apply(arguments);

        if (!this.length &amp;&amp; args.length === 1) {
            return undefined;
        }
        this.each(function() {
            if (args.length === 1) {
                value = fn[$(this).is(&#39;a&#39;) ? &#39;attr&#39; : &#39;prop&#39;].apply($(this), args);
            } else {
                fn[$(this).is(&#39;a&#39;) ? &#39;attr&#39; : &#39;prop&#39;].apply($(this), args);
            }
        });
        return typeof value === &#39;undefined&#39; ? this : value;
    };
})();

&lt;p&gt;在这里，我们对原来的 prop 函数进行了预处理，假如是 a 标签则使用 attr 方式。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap 禁用 a 按钮</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/disable_link</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/disable_link</guid>
      <description>

&lt;h3 id=&#34;问题描述:88cf12f3afe91a87ebec91ff4ba52147&#34;&gt;问题描述：&lt;/h3&gt;

&lt;p&gt;使用 Bootstrap 的 btn 时，可以使用添加 class=&amp;ldquo;disabled&amp;rdquo; 或者 disabled=&amp;ldquo;disabled&amp;rdquo; 来禁用按钮，可以看到 bootstrap.css 中的代码：&lt;/p&gt;
.btn.disabled,
.btn[disabled] {
  cursor: default;
  background-color: #e6e6e6;
  background-image: none;
  opacity: 0.65;
  filter: alpha(opacity=65);
  -webkit-box-shadow: none;
     -moz-box-shadow: none;
          box-shadow: none;
}

&lt;p&gt;假如我们需要对按钮进行事件监听，例如：&lt;/p&gt;
&lt;a href=&#34;#&#34; class=&#34;btn&#34; disabled=&#34;disabled&#34;&gt;按钮&lt;/a&gt;

$(function() {
    $(&#39;btn&#39;).click(function() {
        alert(&#39;click&#39;);
    });
});

&lt;p&gt;按钮是灰掉了，但是还是会触发点击事件。&lt;/p&gt;

&lt;h3 id=&#34;问题解决:88cf12f3afe91a87ebec91ff4ba52147&#34;&gt;问题解决：&lt;/h3&gt;

&lt;p&gt;通过添加 pointer-events 来阻止按钮的事件：&lt;/p&gt;
.btn.disabled,
.btn[disabled] {
    pointer-events: none;
    cursor: default;
}
</description>
    </item>
    
    <item>
      <title>CSS 自定义字体</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/css_font_face</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/css_font_face</guid>
      <description>

&lt;h3 id=&#34;介绍:4084fa00632317148adffee661d6e415&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;通过 CSS 的 @font-face 属性可以实现在网页中嵌入任意字体，例如自定字体、或者是自定义图标（bootstrap）。
为了能在主流浏览器中都能正常显示自定义的字体，我们需要使用字体的三种文件格式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.TTF或.OTF，适用于Firefox 3.5、Safari、Opera&lt;/li&gt;
&lt;li&gt;.EOT，适用于Internet Explorer 4.0+&lt;/li&gt;
&lt;li&gt;.SVG，适用于Chrome、IPhone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般情况下，最常见的字体是.TTF文件，我们需要通过这种文件格式转换为其余两种文件格式。&lt;/p&gt;

&lt;h3 id=&#34;使用:4084fa00632317148adffee661d6e415&#34;&gt;使用&lt;/h3&gt;

&lt;p&gt;使用前，需要对字体进行声明：&lt;/p&gt;
@font-face {
    font-family: &#39;fontName&#39;;
    src: url(&#39;fontName.eot&#39;);
    src: url(&#39;fontName.eot&#39;) format(&#39;embedded-opentype&#39;),
         url(&#39;fontName.woff&#39;) format(&#39;woff&#39;),
         url(&#39;fontName.ttf&#39;) format(&#39;truetype&#39;),
         url(&#39;fontName.svg#FontNameRegular&#39;) format(&#39;svg&#39;);
}

&lt;p&gt;使用：&lt;/p&gt;
body {
    font-family: fontName;
}

&lt;h3 id=&#34;工具:4084fa00632317148adffee661d6e415&#34;&gt;工具&lt;/h3&gt;

&lt;p&gt;上面讲到转换文件格式的，可以通过在线网站
&lt;a href=&#34;http://everythingfonts.com/font-face&#34;&gt;http://everythingfonts.com/font-face&lt;/a&gt; 进行转换，
只要上传 ttf 文件即可，然后会自动生成 css 和其他字体。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS 设置中英文混合字体</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/css_font_setting</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/css_font_setting</guid>
      <description>

&lt;h4 id=&#34;统一设置网站的中英文混合字体:859f55ebbc05be1b1eabcdb9087af2e4&#34;&gt;统一设置网站的中英文混合字体：&lt;/h4&gt;

&lt;p&gt;由于英文字体 Arial 没有中文的，这样英文便显示为 Arial 字体，中文显示为 微软雅黑 字体。&lt;/p&gt;
body {
    font-family: Arial, &#34;微软雅黑&#34;;
}
</description>
    </item>
    
    <item>
      <title>Eclipse 安装插件(aptana、svn 、git、Java EE、JSHint)</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/eclipse_install_the_plugin_aptana_svn_git_java_ee_jshint</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/eclipse_install_the_plugin_aptana_svn_git_java_ee_jshint</guid>
      <description>&lt;p&gt;1、安装 aptana 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://download.aptana.com/studio3/plugin/install&#34;&gt;http://download.aptana.com/studio3/plugin/install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Aptana Studio 3 Plugin，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;2、安装 svn 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://subclipse.tigris.org/update_1.6.x&#34;&gt;http://subclipse.tigris.org/update_1.6.x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Subclipse (Required)、Subversion Client Adapter
(Required)、Subversion JavaHL Native Library Adapter
(Required)，并进行安装&lt;/p&gt;

&lt;p&gt; * 安装libsvn-java（Ubuntu 下需要安装）：sudo apt-get install libsvn-java&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;3、安装 git 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://download.eclipse.org/egit/updates&#34;&gt;http://download.eclipse.org/egit/updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Eclipse EGit，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;4、安装 Java EE 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://download.eclipse.org/releases/indigo&#34;&gt;http://download.eclipse.org/releases/indigo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Eclipse Java EE Developer Tools，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;5、安装 JSHint 插件：
* 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://github.eclipsesource.com/jshint-eclipse/updates/&#34;&gt;http://github.eclipsesource.com/jshint-eclipse/updates/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：JSHint，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse 安装插件(aptana、svn 、git、Java EE、JSHint)</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/eclipse_install_the_plugin_aptana_svn_git_java_ee_jshint</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/eclipse_install_the_plugin_aptana_svn_git_java_ee_jshint</guid>
      <description>&lt;p&gt;1、安装 aptana 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://download.aptana.com/studio3/plugin/install&#34;&gt;http://download.aptana.com/studio3/plugin/install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Aptana Studio 3 Plugin，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;2、安装 svn 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://subclipse.tigris.org/update_1.6.x&#34;&gt;http://subclipse.tigris.org/update_1.6.x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Subclipse (Required)、Subversion Client Adapter
(Required)、Subversion JavaHL Native Library Adapter
(Required)，并进行安装&lt;/p&gt;

&lt;p&gt; * 安装libsvn-java（Ubuntu 下需要安装）：sudo apt-get install libsvn-java&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;3、安装 git 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://download.eclipse.org/egit/updates&#34;&gt;http://download.eclipse.org/egit/updates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Eclipse EGit，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;4、安装 Java EE 插件：&lt;/p&gt;

&lt;p&gt; * 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://download.eclipse.org/releases/indigo&#34;&gt;http://download.eclipse.org/releases/indigo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：Eclipse Java EE Developer Tools，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;

&lt;p&gt;5、安装 JSHint 插件：
* 依次点击：Help -&amp;gt; Install New Software&amp;hellip; -&amp;gt; Add&lt;/p&gt;

&lt;p&gt; * 输入：&lt;a href=&#34;http://github.eclipsesource.com/jshint-eclipse/updates/&#34;&gt;http://github.eclipsesource.com/jshint-eclipse/updates/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; * 选择：JSHint，并进行安装&lt;/p&gt;

&lt;p&gt; * 重启 eclipse&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IE 下 splice 的 bug</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/splice_in_ie</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/splice_in_ie</guid>
      <description>

&lt;p&gt;引用：&lt;/p&gt;
array.splice() in Internet Explorer
I finally got around to investigating an IE bug I’ve been meaning to look into. The root cause was a difference between JScript and ECMAScript as regards array.splice(). The signature for this handy method that removes and inserts array elements in place:

splice(start, deleteCount, value, ...)

According to the standard, only start (the index at which to start removing elements) is a required argument. So:

var a = [&#34;e1&#34;, &#34;e2&#34;, &#34;e3&#34;];
a.splice(1);

should result in a being a single-element array containing “e1″. But of course, IE does not see it that way. According to MSDN, deleteCount is also required argument. Thus, the above would have to be:

var a = [&#34;e1&#34;, &#34;e2&#34;, &#34;e3&#34;];
a.splice(1, a.length-1);

&lt;h4 id=&#34;问题:828165d955b49a5a0cab0507962366b5&#34;&gt;问题：&lt;/h4&gt;

&lt;p&gt;使用 markdown.js 在 IE 下无法正常显示 pre 代码&lt;/p&gt;

&lt;h4 id=&#34;原因:828165d955b49a5a0cab0507962366b5&#34;&gt;原因：&lt;/h4&gt;

&lt;p&gt;array.splice() 在 IE 下的 bug 引起的&lt;/p&gt;

&lt;h4 id=&#34;解决:828165d955b49a5a0cab0507962366b5&#34;&gt;解决：&lt;/h4&gt;

&lt;p&gt;将 markdown.js 中的第 1495 行：&lt;/p&gt;
code.push.apply( code, jsonml.splice( i ) );

&lt;p&gt;改为&lt;/p&gt;
code.push.apply( code, jsonml.splice( i, jsonml.length - 1) );
</description>
    </item>
    
    <item>
      <title>IE 下使用 button 时 Enter 的问题</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/ie_enter_button_bug</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/ie_enter_button_bug</guid>
      <description>

&lt;h4 id=&#34;问题:b5cd3a6e8e8182cad0d2dff4a7361175&#34;&gt;问题：&lt;/h4&gt;

&lt;p&gt;当页面中有&lt;/p&gt;
&lt;button&gt;&lt;/button&gt; 

&lt;p&gt;的时候，IE 浏览器按 Enter 便会触发 button 按钮的点击事件，导致不必要的麻烦出现（例如对 input 的检查）。&lt;/p&gt;

&lt;h4 id=&#34;解决:b5cd3a6e8e8182cad0d2dff4a7361175&#34;&gt;解决：&lt;/h4&gt;

&lt;p&gt;使用&lt;/p&gt;
&lt;a class=&#34;button&#34; href=&#34;javascript:void(0)&#34;&gt;&lt;/a&gt;

&lt;p&gt;来代替，并设置其 css (根据需要进行其他的设置)：&lt;/p&gt;
.button {
    display: inline-block;
    font-size: 14px;
    line-height: 25px;
    text-align: center;
    color: #333;
    text-decoration: none;
    background: url(images/button_sprite.png) no-repeat;
}
</description>
    </item>
    
    <item>
      <title>IE 下使用 button 时 Enter 的问题</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/ie_enter_button_bug</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/ie_enter_button_bug</guid>
      <description>

&lt;h4 id=&#34;问题:b5cd3a6e8e8182cad0d2dff4a7361175&#34;&gt;问题：&lt;/h4&gt;

&lt;p&gt;当页面中有&lt;/p&gt;
&lt;button&gt;&lt;/button&gt; 

&lt;p&gt;的时候，IE 浏览器按 Enter 便会触发 button 按钮的点击事件，导致不必要的麻烦出现（例如对 input 的检查）。&lt;/p&gt;

&lt;h4 id=&#34;解决:b5cd3a6e8e8182cad0d2dff4a7361175&#34;&gt;解决：&lt;/h4&gt;

&lt;p&gt;使用&lt;/p&gt;
&lt;a class=&#34;button&#34; href=&#34;javascript:void(0)&#34;&gt;&lt;/a&gt;

&lt;p&gt;来代替，并设置其 css (根据需要进行其他的设置)：&lt;/p&gt;
.button {
    display: inline-block;
    font-size: 14px;
    line-height: 25px;
    text-align: center;
    color: #333;
    text-decoration: none;
    background: url(images/button_sprite.png) no-repeat;
}
</description>
    </item>
    
    <item>
      <title>IE8 文件上传问题分析小记</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/ie8_file_problem</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/ie8_file_problem</guid>
      <description>&lt;p&gt;先吐槽一番，IE 浏览器让前端开发人员又恨又郁闷，但是没有办法，谁让中国如此多的用户呢。很多时候，一个简单的问题，可能需要花上大半天的时间才能解决，足够浪费时间的了，故在此记录下。&lt;/p&gt;

&lt;p&gt;首先，问题是这样的：&lt;strong&gt;在 IE8 下选择上传文件无任何反应，其他浏览器使用正常。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而同事实现的方法是，将文件选择框隐藏起来，然后通过点击一个按钮来选择上传文件并触发事件：&lt;/p&gt;
&lt;form class=&#34;hidden&#34; action=&#34;url&#34; method=&#34;post&#34; enctype=&#34;multipart/form-data&#34;&gt;
    &lt;input id=&#34;file&#34; type=&#34;file&#34; name=&#34;file&#34;&gt;
&lt;/form&gt;
&lt;a href=&#34;javascript:void(0)&#34; class=&#34;btn&#34;&gt;Upload&lt;/a&gt;
$(&#39;#button&#39;).live(&#39;click&#39;, function () {
    $(&#39;#file&#39;).trigger(&#39;click&#39;);
});
$(&#39;#file&#39;).live(&#39;change&#39;, function () {
    // 调用开始上传方法
});

&lt;p&gt;上面的&lt;code&gt;button&lt;/code&gt;和&lt;code&gt;file&lt;/code&gt;分别是按钮和文件选择框的 ID。&lt;code&gt;live&lt;/code&gt;是旧版 jQuery 绑定事件的方法，现在已经废弃了。&lt;/p&gt;

&lt;p&gt;查阅相关资料，得知这是 jQuery 的一个 bug，&lt;strong&gt;IE8 file 使用&lt;code&gt;live&lt;/code&gt;方法不能触发 change 事件&lt;/strong&gt;，所以将代码改为：&lt;/p&gt;
$(&#39;#button&#39;).click(function () {
    $(&#39;#file&#39;).trigger(&#39;click&#39;);
});
$(&#39;#file&#39;).change(function () {
    // 调用开始上传方法
});

&lt;p&gt;改完之后是可以触发 change 事件了，但是得到这样的一个错误：&lt;code&gt;Access is denied&lt;/code&gt;。原因如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IE doesn&amp;rsquo;t allow manipulation of the type=&amp;ldquo;file&amp;rdquo; input element from javascript due to security reasons. Setting the filename or invoking a click event to show the browser dialog will result in an &amp;ldquo;Access is denied&amp;rdquo; error on the form submit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;使用手动触发点击事件来弹出文件选择框会出现没有权限的错误。&lt;/strong&gt;于是，我又对代码进行了改进：&lt;/p&gt;
&lt;style&gt;
.pr {
    position: relative;
}
#file {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    right: 0;
    opacity: 0;
    filter: alpha(opacity=0);
}
&lt;/style&gt;
&lt;form action=&#34;url&#34; method=&#34;post&#34; enctype=&#34;multipart/form-data&#34;&gt;
    &lt;a href=&#34;javascript:void(0)&#34; class=&#34;button pr&#34;&gt;
        Upload
        &lt;input id=&#34;file&#34; type=&#34;file&#34; name=&#34;file&#34;&gt;
    &lt;/a&gt;
&lt;/form&gt;

&lt;p&gt;注意到 css 样式，我将 file 的透明度设置为 0，放置在按钮上，当点击按钮的时候，实际上点击的是 file，并且删除了按钮的&lt;code&gt;click&lt;/code&gt;事件，从而解决了手动触发 click 事件所导致的&lt;code&gt;Access is denied&lt;/code&gt;的问题。&lt;/p&gt;

&lt;p&gt;但是接着我又遇到了问题，因为后台是使用 php 的，我们知道，php 用于处理文件上传使用的是 &lt;code&gt;$_FILES&lt;/code&gt;，在其他浏览器都正常，但是 IE8 选择文件就会出现空的情况。网上说要设置：&lt;/p&gt;

&lt;p&gt;form：&lt;/p&gt;
enctype=&#34;multipart/form-data&#34;

&lt;p&gt;php.ini：&lt;/p&gt;
file_uploads = On; sounds like you already did this
post_max_size = 8M; change this higher if needed
upload_max_file_size = 8M; change this higher if needed

&lt;p&gt;通过检查，都已经设置的了，那就郁闷了，为什么死活没有数据呢？&lt;/p&gt;

&lt;p&gt;于是我用了最简单的方法，写了个只有文件上传的demo作为对比，结果是能获取到&lt;code&gt;$_FILES&lt;/code&gt;的数据的！！！&lt;/p&gt;

&lt;p&gt;问题的原因居然是因为 &lt;strong&gt;file 不能嵌套在 a 标签下&lt;/strong&gt;，不然会导致获取不到数据，这个又是 IE8 的 bug，问题到此告一段落，却也浪费了我大半天的时间，最后的解决方案如下：&lt;/p&gt;
&lt;style&gt;
.pr {
    position: relative;
}
.dil {
    display: inline-block;
}
#file {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    right: 0;
    opacity: 0;
    filter: alpha(opacity=0);
}
&lt;/style&gt;
&lt;form action=&#34;url&#34; method=&#34;post&#34; enctype=&#34;multipart/form-data&#34;&gt;
    &lt;span class=&#34;pr dil&#34;&gt;
        &lt;a href=&#34;javascript:void(0)&#34; class=&#34;btn&#34;&gt;Upload&lt;/a&gt;
        &lt;input id=&#34;file&#34; type=&#34;file&#34; name=&#34;file&#34;&gt;
    &lt;/span&gt;
&lt;/form&gt;
</description>
    </item>
    
    <item>
      <title>Java 获取当前路径</title>
      <link>http://blog.wenzhixin.net.cn/1/01/01/java_get_cur_path</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.wenzhixin.net.cn/1/01/01/java_get_cur_path</guid>
      <description>

&lt;h4 id=&#34;1-利用-system-getproperty-函数获取当前路径:540daac25fb976cd73bd39aa4ba49495&#34;&gt;1. 利用 System.getProperty( )函数获取当前路径：&lt;/h4&gt;
System.out.println(System.getProperty(&#34;user.dir&#34;));//user.dir指定了当前的路径

&lt;h4 id=&#34;2-使用-file-提供的函数获取当前路径:540daac25fb976cd73bd39aa4ba49495&#34;&gt;2. 使用 File 提供的函数获取当前路径：&lt;/h4&gt;
File directory = new File(&#34;&#34;);//设定为当前文件夹
try {
    System.out.println(directory.getCanonicalPath());//获取标准的路径
    System.out.println(directory.getAbsolutePath());//获取绝对路径
} catch(Exceptin e) {}

&lt;h4 id=&#34;3-使用当前类获取当前路径:540daac25fb976cd73bd39aa4ba49495&#34;&gt;3. 使用当前类获取当前路径：&lt;/h4&gt;
 System.out.println(Test.class.getResource(&#34;&#34;));//获取标准的路径
</description>
    </item>
    
  </channel>
</rss>